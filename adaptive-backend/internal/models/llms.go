package models

import (
	"github.com/conneroisu/groq-go/pkg/tools"
)

type ChatCompletionRequest struct {
	Messages []Message `json:"messages"`
}

type ProviderChatCompletionRequest struct {
	Provider         string    `json:"provider"`
	Model            string    `json:"model"`
	Messages         []Message `json:"messages"`
	Temperature      float32   `json:"maxTemperature"`
	N                int       `json:"n"`
	MaxTokens        int       `json:"maxTokens"`
	TopP             float32   `json:"top_p"`
	PresencePenalty  float32   `json:"presence_penalty"`
	FrequencyPenalty float32   `json:"frequency_penalty"`
	Stream           bool      `json:"stream"`
}

// ChatMessagePartType is the chat message part type.
//
// string
type ChatMessagePartType string

const (
	// ChatMessagePartTypeText is the text chat message part type.
	ChatMessagePartTypeText ChatMessagePartType = "text"
	// ChatMessagePartTypeImageURL is the image url chat message part type.
	ChatMessagePartTypeImageURL ChatMessagePartType = "image_url"
)

// # Images

// ImageURLDetail is the detail of the image at the URL.
//
// string
type ImageURLDetail string

const (
	// ImageURLDetailHigh is the high image url detail.
	ImageURLDetailHigh ImageURLDetail = "high"
	// ImageURLDetailLow is the low image url detail.
	ImageURLDetailLow ImageURLDetail = "low"
	// ImageURLDetailAuto is the auto image url detail.
	ImageURLDetailAuto ImageURLDetail = "auto"
)

// ChatMessageImageURL represents the chat message image url.
type ChatMessageImageURL struct {
	// URL is the url of the image.
	URL string `json:"url,omitempty"`
	// Detail is the detail of the image url.
	Detail ImageURLDetail `json:"detail,omitempty"`
}

// ChatMessagePart represents the chat message part of a chat completion
// message.
type ChatMessagePart struct {
	// Text is the text of the chat message part.
	Text string `json:"text,omitempty"`
	// Type is the type of the chat message part.
	Type ChatMessagePartType `json:"type,omitempty"`
	// ImageURL is the image url of the chat message part.
	ImageURL *ChatMessageImageURL `json:"image_url,omitempty"`
}

// Message represents a chat message
type Message struct {
	Role    string `json:"role"`
	Content string `json:"content"`
	// MultiContent is the multi content of the chat completion
	// message.
	MultiContent []ChatMessagePart `json:"-"`
	// FunctionCall setting for Role=assistant prompts this may be
	// set to the function call generated by the model.
	FunctionCall *tools.FunctionCall `json:"function_call,omitempty"`
	// ToolCalls setting for Role=assistant prompts this may be set
	// to the tool calls generated by the model, such as function
	// calls.
	ToolCalls []tools.ToolCall `json:"tool_calls,omitempty"`
	// ToolCallID is setting for Role=tool prompts this should be
	// set to the ID given in the assistant's prior request to call
	// a tool.
	ToolCallID string `json:"tool_call_id,omitempty"`
}

type ChatCompletionResponse struct {
	Provider string `json:"provider"`
	Response any    `json:"response"`
	Error    string `json:"error,omitempty"`
}

// PromptRequest represents the prompt request body
type SelectModelRequest struct {
	Prompt string `json:"prompt"`
}

// SelectModelResponse represents the response from the select-model endpoint
type SelectModelResponse struct {
	SelectedModel string           `json:"selected_model"`
	Provider      string           `json:"provider"`
	Parameters    OpenAIParameters `json:"parameters"`
}

type OpenAIParameters struct {
	MaxTokens        int     `json:"max_tokens,omitempty"`
	Temperature      float32 `json:"temperature,omitempty"`
	TopP             float32 `json:"top_p,omitempty"`
	PresencePenalty  float32 `json:"presence_penalty,omitempty"`
	FrequencyPenalty float32 `json:"frequency_penalty,omitempty"`
	N                int     `json:"n,omitempty"`
}
