name: Backend CI

on:
  push:
    branches: [main]
    paths:
      - "adaptive-backend/**"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/backend-checks.yml"

  pull_request:
    branches: [main]
    paths:
      - "adaptive-backend/**"
      - "go.mod"
      - "go.sum"
      - ".github/workflows/backend-checks.yml"

  workflow_dispatch:

jobs:
  build-test-lint:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./adaptive-backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.1"
          cache: true
          cache-dependency-path: ./go.sum

      - name: Install dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          args: --timeout=5m
          working-directory: ./adaptive-backend

      - name: Run tests
        run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          flags: backend
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Build
        run: go build -v ./...

  security-scan:
    runs-on: ubuntu-latest
    needs: build-test-lint
    defaults:
      run:
        working-directory: ./adaptive-backend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.24.1"
          cache: true
          cache-dependency-path: go.sum

      - name: Install dependencies
        run: go mod download

      - name: Install gosec
        run: go install github.com/securego/gosec/v2/cmd/gosec@latest

      - name: Run Gosec Security Scanner
        run: gosec -exclude-dir=vendor -exclude-dir=.git -exclude-dir=testdata ./...

  build-and-deploy:
    runs-on: ubuntu-latest
    needs: [build-test-lint, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Build and push to Azure Container Registry
        uses: azure/container-apps-deploy-action@v1
        with:
          appSourcePath: ${{ github.workspace }}/adaptive-backend
          containerAppName: backend-go
          resourceGroup: adaptive
          registryUrl: ${{ secrets.REGISTRY_URL }}
          imageToBuild: backend-go:${{ github.sha }}
          registryUsername: ${{ secrets.ACR_USERNAME }}
          registryPassword: ${{ secrets.ACR_PASSWORD }}
          environmentVariables: |
            GROQ_API_KEY=${{ secrets.GROQ_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }}
            CLERK_SECRET_KEY=${{ secrets.CLERK_SECRET_KEY }}
            ADDR=:8080
            ENV=production
            ADAPTIVE_AI_BASE_URL=https://${{ secrets.BACKEND_PYTHON_FQDN }}
            ALLOWED_ORIGINS=https://${{ secrets.FRONTEND_FQDN }}
