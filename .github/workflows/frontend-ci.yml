# GitHub Actions for Azure Web Apps Deploy: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and Deploy Adaptive App to Azure App Service

on:
  push:
    branches:
      - main
    paths:
      - "adaptive-app/**"
      - ".github/workflows/frontend-ci.yml"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: |
            ./adaptive-app/node_modules
            ~/.bun/install/cache
          key: ${{ runner.os }}-bun-${{ hashFiles('./adaptive-app/bun.lock') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile
        working-directory: ./adaptive-app

      - name: Run tests
        run: bun test --coverage
        working-directory: ./adaptive-app

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        with:
          directory: ./adaptive-app/coverage
          flags: frontend
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Run Biome (Lint & Format Check)
        run: bun run check
        working-directory: ./adaptive-app

      - name: Type check
        run: bun run typecheck
        working-directory: ./adaptive-app

      - name: Generate Prisma client (if applicable)
        run: bunx prisma generate
        working-directory: ./adaptive-app

      - name: Build Next.js application
        run: bun run build
        working-directory: ./adaptive-app
        env:
          NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.VITE_CLERK_PUBLISHABLE_KEY }}
          ADAPTIVE_API_BASE_URL: ${{ secrets.VITE_BASE_API_URL }}
          CLERK_SECRET_KEY: ${{ secrets.CLERK_SECRET_KEY }}
          SKIP_ENV_VALIDATION: true

      # --- DEBUG STEP: Examine build output immediately after Next.js build ---
      - name: Debug - List Build Output After Next.js Build
        run: |
          echo "Contents of adaptive-app/build after Next.js build:"
          ls -laR ./adaptive-app/build || echo "adaptive-app/build not found or empty."
          echo ""
          echo "Expected standalone path: ./adaptive-app/build/standalone"
          [ -d "./adaptive-app/build/standalone" ] && ls -laR ./adaptive-app/build/standalone || echo "standalone dir not found or empty."
        working-directory: . # Run from the root of the checkout
      # --- END DEBUG STEP ---

      - name: Prepare standalone artifact for deployment
        # This step follows the logic from the blog post to create a self-contained package.
        # Note: The blog uses 'build' as the distDir, so we use that path.
        # REVIEW THIS STEP: If your Next.js `output: 'standalone'` already copies `static` and `public` correctly
        # into `build/standalone`, these `mv` commands might be redundant or incorrect.
        # The `Debug - List Build Output` step above will help confirm the structure.
        run: |
          # Ensure target directories exist before moving (optional, mv -t handles it but good for clarity)
          mkdir -p ./adaptive-app/build/standalone/build/static
          mkdir -p ./adaptive-app/build/standalone/public

          # Move `static` and `public` into the `standalone` directory
          mv ./adaptive-app/build/static ./adaptive-app/build/standalone/build/static
          mv ./adaptive-app/public ./adaptive-app/build/standalone/public
        working-directory: . # Run from the root to get paths right

      - name: Zip artifact for deployment
        # Zip ONLY the contents of the standalone directory
        # This command creates `release.zip` inside `./adaptive-app/build/standalone`
        run: zip -r release.zip .
        working-directory: ./adaptive-app/build/standalone

      # --- DEBUG STEP: Examine directories before upload ---
      - name: Debug - List Contents Before Upload
        run: |
          echo "Contents of adaptive-app/build/standalone after zipping (should contain release.zip):"
          ls -la ./adaptive-app/build/standalone/
          echo ""
          echo "Contents of root workspace (should NOT contain release.zip directly):"
          ls -la .
        working-directory: . # Run from root to check both locations
      # --- END DEBUG STEP ---

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app-for-deploy
          # CORRECTED PATH: Point to the actual location of release.zip
          path: ./adaptive-app/build/standalone/release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    permissions:
      id-token: write
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app-for-deploy
          path: . # This downloads release.zip to the current job's root directory

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID_838FE90E251F4F4BA3428D7B1AB5F77E }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID_C3C9BA1D668949CEADA375A77D743706 }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID_43E538959BE7419F8C1C8EE7AC05C234 }}

      - name: "Deploy to Azure Web App"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: "adaptive-app"
          slot-name: "Production"
          # The package is now the root directory because the zip file contains the standalone app directly.
          package: "."
