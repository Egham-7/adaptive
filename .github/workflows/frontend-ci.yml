name: Frontend CI/CD

on:
    push:
        branches: [main]
        paths:
            - "adaptive-app/**"
            - ".github/workflows/frontend-ci.yml"
    pull_request:
        branches: [main]
        paths:
            - "adaptive-app/**"
            - ".github/workflows/frontend-ci.yml"
    workflow_dispatch:

env:
    REGISTRY_URL: llmadaptiveregistry.azurecr.io
    IMAGE_NAME: frontend
    WORKING_DIR: ./adaptive-app

jobs:
    quality:
        name: Quality Checks
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ env.WORKING_DIR }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.bun/install/cache
                      ${{ env.WORKING_DIR }}/node_modules
                  key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
                  restore-keys: |
                      ${{ runner.os }}-bun-

            - name: Install dependencies
              run: bun install --frozen-lockfile

            - name: Generate Prisma client
              run: bunx prisma generate --no-engine
              env:
                  DATABASE_URL: postgresql://test:test@localhost:5432/test

            - name: Type check
              run: bun run typecheck

            - name: Lint & format
              run: bun run check

            - name: Check unused dependencies
              run: bunx depcheck --ignores="@types/*,prisma,@prisma/*,sharp"

    security:
        name: Security Audit
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ env.WORKING_DIR }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Bun
              uses: oven-sh/setup-bun@v2
              with:
                  bun-version: latest

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: |
                      ~/.bun/install/cache
                      ${{ env.WORKING_DIR }}/node_modules
                  key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
                  restore-keys: |
                      ${{ runner.os }}-bun-

            - name: Install dependencies
              run: bun install --frozen-lockfile

            - name: Security audit
              run: bun audit

    build:
        name: Build & Push
        runs-on: ubuntu-latest
        needs: [quality, security]
        if: github.event_name != 'pull_request'
        outputs:
            image-digest: ${{ steps.build.outputs.digest }}
            image-tag: ${{ steps.meta.outputs.tags }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Login to registry
              uses: azure/docker-login@v2
              with:
                  login-server: ${{ env.REGISTRY_URL }}
                  username: ${{ secrets.FRONTEND_REGISTRY_USERNAME }}
                  password: ${{ secrets.FRONTEND_REGISTRY_PASSWORD }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.REGISTRY_URL }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=sha,prefix={{branch}}-
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push
              id: build
              uses: docker/build-push-action@v5
              with:
                  context: ${{ env.WORKING_DIR }}
                  platforms: linux/amd64
                  push: true
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=gha
                  cache-to: type=gha,mode=max
                  build-args: |
                      DATABASE_URL=${{ secrets.DATABASE_URL }}
                      CLERK_PUBLISHABLE_KEY=${{ secrets.NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY }}

    scan:
        name: Container Scan
        runs-on: ubuntu-latest
        needs: build
        if: github.event_name != 'pull_request'
        steps:
            - name: Run Trivy scanner
              uses: aquasecurity/trivy-action@master
              with:
                  image-ref: ${{ needs.build.outputs.image-tag }}
                  format: sarif
                  output: trivy-results.sarif

            - name: Upload scan results
              uses: github/codeql-action/upload-sarif@v3
              if: always()
              with:
                  sarif_file: trivy-results.sarif

    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        needs: [build, scan]
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        environment: production
        steps:
            - name: Azure Login
              uses: azure/login@v2
              with:
                  client-id: ${{ secrets.FRONTEND_AZURE_CLIENT_ID }}
                  tenant-id: ${{ secrets.FRONTEND_AZURE_TENANT_ID }}
                  subscription-id: ${{ secrets.FRONTEND_AZURE_SUBSCRIPTION_ID }}

            - name: Deploy to Azure Container Apps
              uses: azure/container-apps-deploy-action@v2
              with:
                  containerAppName: frontend
                  resourceGroup: adaptive
                  imageToDeploy: ${{ needs.build.outputs.image-tag }}
