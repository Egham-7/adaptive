name: AI Service CI/CD

on:
    push:
        branches: [main]
        paths:
            - "adaptive_ai/**"
            - ".github/workflows/ai-service-ci.yml"
    pull_request:
        branches: [main]
        paths:
            - "adaptive_ai/**"
            - ".github/workflows/ai-service-ci.yml"
    workflow_dispatch:

env:
    PYTHON_VERSION: "3.11"
    WORKING_DIR: "./adaptive_ai"

jobs:
    test:
        name: Test & Coverage
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ env.WORKING_DIR }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  version: latest
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: ${{ env.WORKING_DIR }}/.venv
                  key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-poetry-

            - name: Install dependencies
              run: poetry install --no-interaction

            - name: Run tests
              run: poetry run pytest --cov=. --cov-report=xml

            - name: Upload coverage
              uses: codecov/codecov-action@v4
              with:
                  file: ${{ env.WORKING_DIR }}/coverage.xml
                  flags: backend-python
                  fail_ci_if_error: false
                  token: ${{ secrets.CODECOV_TOKEN }}

    lint:
        name: Lint & Format
        runs-on: ubuntu-latest
        defaults:
            run:
                working-directory: ${{ env.WORKING_DIR }}
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Setup Python
              uses: actions/setup-python@v5
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install Poetry
              uses: snok/install-poetry@v1
              with:
                  version: latest
                  virtualenvs-create: true
                  virtualenvs-in-project: true
                  installer-parallel: true

            - name: Cache dependencies
              uses: actions/cache@v4
              with:
                  path: ${{ env.WORKING_DIR }}/.venv
                  key: ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-poetry-${{ hashFiles('**/poetry.lock') }}
                  restore-keys: |
                      ${{ runner.os }}-python-${{ env.PYTHON_VERSION }}-poetry-

            - name: Install dependencies
              run: poetry install --no-interaction

            - name: Run type checking
              run: poetry run mypy .

            - name: Run linting
              run: poetry run ruff check . --output-format=github

            - name: Check formatting
              run: poetry run black . --check --diff

    deploy:
        name: Deploy
        runs-on: ubuntu-latest
        needs: [test, lint]
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        permissions:
            id-token: write
            contents: read
        steps:
            - name: Checkout
              uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v2
              with:
                  client-id: ${{ secrets.PROMPTCLASSIFIER_AZURE_CLIENT_ID }}
                  tenant-id: ${{ secrets.PROMPTCLASSIFIER_AZURE_TENANT_ID }}
                  subscription-id: ${{ secrets.PROMPTCLASSIFIER_AZURE_SUBSCRIPTION_ID }}

            - name: Deploy to Azure Container Apps
              uses: azure/container-apps-deploy-action@v2
              with:
                  appSourcePath: ${{ github.workspace }}/adaptive_ai
                  registryUrl: llmadaptiveregistry.azurecr.io
                  registryUsername: ${{ secrets.PROMPTCLASSIFIER_REGISTRY_USERNAME }}
                  registryPassword: ${{ secrets.PROMPTCLASSIFIER_REGISTRY_PASSWORD }}
                  containerAppName: prompt-classifier
                  resourceGroup: adaptive
                  imageToBuild: llmadaptiveregistry.azurecr.io/prompt-classifier:${{ github.sha }}
