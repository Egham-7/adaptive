services:
  frontend:
    build:
      context: ./adaptive-app
      dockerfile: Dockerfile
      args:
        - CLERK_PUBLISHABLE_KEY=${CLERK_PUBLISHABLE_KEY}
        - DATABASE_URL=${DATABASE_URL}
        - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}

    env_file:
      - ./adaptive-app/.env
    ports:
      - "3000:3000"
    depends_on:
      - backend-go
      - backend-python
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s

  backend-go:
    build:
      context: ./adaptive-backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - backend-python
    env_file:
      - ./adaptive-backend/.env.local
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:8080/"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 10s

  backend-python:
    build:
      context: ./adaptive_ai
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ADAPTIVE_AI_ENVIRONMENT=production
      - ADAPTIVE_AI_LOG_LEVEL=INFO
    env_file:
      - ./adaptive_ai/.env.local
    restart: unless-stopped
    networks:
      - app-network
    volumes:
      - ./adaptive_ai/config:/app/config:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 15s

networks:
  app-network:
    driver: bridge

volumes:
  caddy_data:
  caddy_config:
